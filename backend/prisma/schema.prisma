// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your models here
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String?
  password         String?   // Hashed password for email/password auth
  image            String?   // Profile image URL
  emailVerified    DateTime?
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  reports          Report[]
}

// OAuth accounts for social login (Google, Microsoft)
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  // e.g. "oauth", "email"
  provider          String  // e.g. "google", "microsoft"
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session management for logged in users
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Model for AI-generated reports
model Report {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  query        String   // The original chat query
  apiCode      String   @db.Text  // Generated Xero API code
  renderCode   String   @db.Text  // Generated chart/list render code
  userId       Int      // User who created the report
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  data         String   @db.Text  @default("{}")  // Store report data as JSON string
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}
